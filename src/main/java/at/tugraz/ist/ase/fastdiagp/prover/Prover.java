package at.tugraz.ist.ase.fastdiagp.prover;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import static at.tugraz.ist.ase.fastdiagp.prover.Utils.printConsistencyCheck;

/**
 * This implementation proves that FastDiagP's LookAhead function can generate all possible
 * consistency checks needed by FastDiag.
 * Input: a number representing the number of constraints in C.
 * Output: print two lists of consistency checks
 */
public class Prover {

    public static void main(String[] args) throws IOException {
        // Input: an integer presenting the number of constraints
        int n = Integer.parseInt(args[0]);

        // generates the constraints in C
        Set<String> C = new LinkedHashSet<>();
        for (int i = 0; i < n; i++) {
            C.add(String.format("c%d", i + 1));
        }

        // get all consistency checks of FastDiag
        FastDiagV3 fd = new FastDiagV3();
        fd.printConsistencyChecks(C);

        List<Set<String>> fdCCList = fd.getCCList();
        String fdCCFile = "fdcc_" + n + ".txt";
        saveCC(fdCCList, fdCCFile);

//        System.out.println("re-print");
//        int count = 1;
//        for (Set<String> stringSet : CCList) {
//            printConstraints(count++, stringSet);
//        }

        // get all consistency checks generated by FastDiagP's LookAhead function
        FastDiagP fdp = new FastDiagP();
        fdp.generateCC(C);

        List<Set<String>> fdpCCList = fdp.getCCList();
        String fdpCCFile = "fdpcc_" + n + ".txt";
        saveCC(fdpCCList, fdpCCFile);

        // compare two lists of consistency checks
        System.out.println("Checking consistency checks...");
        int counter = 0;
        for (Set<String> cc : fdCCList) {
            if (contains(fdpCCList, cc, counter)) {
                counter++;
            }
        }

        if (counter == fdCCList.size()) {
            System.out.println("Yes, FastDiagP's LookAhead function can generate all consistency checks needed by FastDiag.");
        } else {
            System.out.println("No, FastDiagP's LookAhead function cannot generate all consistency checks needed by FastDiag.");
        }
    }

    private static boolean contains(List<Set<String>> fdpCCList, Set<String> strings, int counter) {
        System.out.print("Check ");
        printConsistencyCheck(counter, strings);

        int secondCounter = 0;
        for (Set<String> stringSet : fdpCCList) {
            secondCounter++;
            if (stringSet.size() == strings.size() && stringSet.containsAll(strings)) {
                printConsistencyCheck(secondCounter, stringSet);
                return true;
            }
        }
        System.out.println("NO");
        return false;
    }

    private static void saveCC(List<Set<String>> ccList, String filename) throws IOException {
        BufferedWriter writer = new BufferedWriter(new FileWriter(filename));

        int count = 1;
        for (Set<String> cc : ccList) {
            StringBuilder sb = new StringBuilder();
            sb.append(count++).append(": {");
            cc.forEach(s -> sb.append(s).append(", "));
            sb.deleteCharAt(sb.length() - 1);
            sb.deleteCharAt(sb.length() - 1);
            sb.append("}");

            writer.write(sb.toString() + "\n");
        }

        writer.close();
    }
}
