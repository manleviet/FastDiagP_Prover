package at.tugraz.ist.ase.fastdiagp.prover;

import lombok.Getter;
import org.apache.commons.collections4.SetUtils;

import java.util.*;

import static at.tugraz.ist.ase.fastdiagp.prover.Utils.printConsistencyCheck;

public class FastDiagP {
    static int incrementCounter;

    @Getter
    private List<Set<String>> CCList;

    public FastDiagP() {
        CCList = new ArrayList<>();
    }

    public void generateCC(Set<String> C) {
        incrementCounter = 1;
        System.out.println("Consistency checks generated by LookAhead: ");

        lookAhead(C, Collections.emptySet(), new ArrayList<>());
    }

    public void lookAhead(Set<String> C, Set<String> B, List<Set<String>> Δ) {
        if (!C.isEmpty()) {
            Set<String> BwithC = SetUtils.union(B, C);

            printConsistencyCheck(incrementCounter++, BwithC);
            CCList.add(BwithC); // AddCC(B U C);
        }

        int sizeC = C.size();

        // B U C assumed inconsistent
        if (sizeC > 1) {
            printLookAheadInformation(C, B, Δ);
            System.out.println("B U C assumed inconsistent - C1.1");
            System.out.println("-------------------------------------");

            // Split(C, Cl, Cr);
            Set<String> Cl = new LinkedHashSet<>(C);
            Set<String> Cr = new LinkedHashSet<>(C);
            split(C, Cl, Cr);

            // LookAhead(Cl, B, Cr U Δ, l + 1);
            List<Set<String>> newΔ = new ArrayList<>(Δ);
            newΔ.add(0, Cr);
            lookAhead(Cl, B, newΔ);
        } else if (sizeC == 1 && !Δ.isEmpty() && Δ.get(0).size() == 1) {
            printLookAheadInformation(C, B, Δ);
            System.out.println("B U C assumed inconsistent - C1.2");
            System.out.println("-------------------------------------");

            Set<String> Δ1 = Δ.get(0);
            // LookAhead(Δ1, B, Δ \ {Δ1}, l + 1);
            List<Set<String>> newΔ = new ArrayList<>(Δ);
            newΔ.remove(0);
            lookAhead(Δ1, B, newΔ);
        } else if (sizeC == 1 && !Δ.isEmpty() && Δ.get(0).size() > 1) {
            printLookAheadInformation(C, B, Δ);
            System.out.println("B U C assumed inconsistent - C1.3");
            System.out.println("-------------------------------------");

            Set<String> Δ1 = Δ.get(0);
            // Split(Δ1, Δ1l, Δ1r);
            Set<String> Δ1l = new LinkedHashSet<>(Δ1);
            Set<String> Δ1r = new LinkedHashSet<>(Δ1);
            split(Δ1, Δ1l, Δ1r);

            // LookAhead(Δ1l, B, Δ1r U (Δ \ {Δ1})), l + 1);
            List<Set<String>> newΔ = new ArrayList<>(Δ);
            newΔ.remove(0);
            newΔ.add(0, Δ1r);
            lookAhead(Δ1l, B, newΔ);
        }

        // B U C assumed consistent
        if (!Δ.isEmpty() && Δ.get(0).size() == 1) {
            printLookAheadInformation(C, B, Δ);
            System.out.println("B U C assumed consistent - C2.2");
            System.out.println("-------------------------------------");

            Set<String> Δ1 = Δ.get(0);
            // LookAhead(Δ1, B U C, Φ, l + 1);
            List<Set<String>> newΔ = new ArrayList<>(Δ);
            newΔ.remove(0);
            lookAhead(Δ1, SetUtils.union(B, C), newΔ);
        } else if (!Δ.isEmpty() && Δ.get(0).size() > 1) {
            printLookAheadInformation(C, B, Δ);
            System.out.println("B U C assumed consistent - C2.1");
            System.out.println("-------------------------------------");

            Set<String> Δ1 = Δ.get(0);
            // Split(Δ1, Δ1l, Δ1r);
            Set<String> Δ1l = new LinkedHashSet<>(Δ1);
            Set<String> Δ1r = new LinkedHashSet<>(Δ1);
            split(Δ1, Δ1l, Δ1r);

            // LookAhead(Δ1l, B U C, Δ1r U (Δ \ {Δ1})), l + 1);
            List<Set<String>> newΔ = new ArrayList<>(Δ);
            newΔ.remove(0);
            newΔ.add(0, Δ1r);
            lookAhead(Δ1l, SetUtils.union(B, C), newΔ);
        }

        printLookAheadInformation(C, B, Δ);
        System.out.println("END");
        System.out.println("-------------------------------------");
    }

    private void split(Set<String> C, Set<String> C1, Set<String> C2) {
        int k = C.size() / 2; // k = sizeC/2;
        // C1 = {c1..ck}; C2 = {ck+1..cn};
        List<String> firstSubList = new ArrayList<>(C).subList(0, k);
        List<String> secondSubList = new ArrayList<>(C).subList(k, C.size());
        C1.removeAll(secondSubList);
        C2.removeAll(firstSubList);
    }

    private void printLookAheadInformation(Set<String> C, Set<String> B, List<Set<String>> Δ) {
        System.out.println("-------------------------------------");
        System.out.println("C: " + C);
        System.out.println("B: " + B);
        System.out.println("Δ: " + Δ);
    }
}
